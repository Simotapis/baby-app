// src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import ForecastDetails from './pages/ForecastDetails';
import Settings from './pages/Settings';
import SavedLocations from './pages/SavedLocations';
import Header from './components/layout/Header';
import Sidebar from './components/layout/Sidebar';
import { WeatherProvider } from './context/WeatherContext';
import './styles/App.css';

function App() {
  return (
    <WeatherProvider>
      <Router>
        <div className="app-container">
          <Header />
          <div className="main-content">
            <Sidebar />
            <div className="page-content">
              <Routes>
                <Route path="/" element={<Dashboard />} />
                <Route path="/forecast/:location" element={<ForecastDetails />} />
                <Route path="/settings" element={<Settings />} />
                <Route path="/saved-locations" element={<SavedLocations />} />
              </Routes>
            </div>
          </div>
        </div>
      </Router>
    </WeatherProvider>
  );
}

export default App;

// src/context/WeatherContext.js
import React, { createContext, useState, useEffect } from 'react';
import { fetchWeatherData, fetchForecast } from '../services/weatherApi';

export const WeatherContext = createContext();

export const WeatherProvider = ({ children }) => {
  const [currentWeather, setCurrentWeather] = useState(null);
  const [forecast, setForecast] = useState(null);
  const [location, setLocation] = useState('New York');
  const [units, setUnits] = useState('metric'); // metric or imperial
  const [savedLocations, setSavedLocations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Load saved data from localStorage
  useEffect(() => {
    const savedUnits = localStorage.getItem('weatherUnits');
    if (savedUnits) setUnits(savedUnits);
    
    const savedLocationsList = localStorage.getItem('savedLocations');
    if (savedLocationsList) setSavedLocations(JSON.parse(savedLocationsList));
    
    const lastLocation = localStorage.getItem('lastLocation');
    if (lastLocation) setLocation(lastLocation);
  }, []);

  // Save data to localStorage when it changes
  useEffect(() => {
    localStorage.setItem('weatherUnits', units);
    localStorage.setItem('savedLocations', JSON.stringify(savedLocations));
    localStorage.setItem('lastLocation', location);
  }, [units, savedLocations, location]);

  // Fetch weather data when location or units change
  useEffect(() => {
    const getWeatherData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const weatherData = await fetchWeatherData(location, units);
        setCurrentWeather(weatherData);
        
        const forecastData = await fetchForecast(location, units);
        setForecast(forecastData);
        
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch weather data. Please try again.');
        setLoading(false);
      }
    };
    
    if (location) {
      getWeatherData();
    }
  }, [location, units]);

  // Add a location to saved locations
  const saveLocation = (locationName) => {
    if (!savedLocations.includes(locationName)) {
      setSavedLocations([...savedLocations, locationName]);
    }
  };

  // Remove a location from saved locations
  const removeLocation = (locationName) => {
    setSavedLocations(savedLocations.filter(loc => loc !== locationName));
  };

  // Change temperature units
  const toggleUnits = () => {
    setUnits(prev => prev === 'metric' ? 'imperial' : 'metric');
  };

  return (
    <WeatherContext.Provider
      value={{
        currentWeather,
        forecast,
        location,
        setLocation,
        units,
        toggleUnits,
        savedLocations,
        saveLocation,
        removeLocation,
        loading,
        error
      }}
    >
      {children}
    </WeatherContext.Provider>
  );
};

// src/services/weatherApi.js
const API_KEY = 'YOUR_API_KEY'; // Replace with your actual API key
const BASE_URL = 'https://api.openweathermap.org/data/2.5';

export const fetchWeatherData = async (location, units = 'metric') => {
  try {
    const response = await fetch(
      `${BASE_URL}/weather?q=${location}&units=${units}&appid=${API_KEY}`
    );
    
    if (!response.ok) {
      throw new Error('Weather data not available');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error fetching weather data:', error);
    throw error;
  }
};

export const fetchForecast = async (location, units = 'metric') => {
  try {
    const response = await fetch(
      `${BASE_URL}/forecast?q=${location}&units=${units}&appid=${API_KEY}`
    );
    
    if (!response.ok) {
      throw new Error('Forecast data not available');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error fetching forecast data:', error);
    throw error;
  }
};

// src/pages/Dashboard.js
import React, { useContext } from 'react';
import { WeatherContext } from '../context/WeatherContext';
import WeatherCard from '../components/features/WeatherCard';
import ForecastChart from '../components/features/ForecastChart';
import LocationSearch from '../components/features/LocationSearch';
import ExportButton from '../components/common/ExportButton';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ErrorMessage from '../components/common/ErrorMessage';

function Dashboard() {
  const { 
    currentWeather, 
    forecast, 
    location, 
    loading, 
    error, 
    saveLocation 
  } = useContext(WeatherContext);

  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error} />;

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>Weather Dashboard</h1>
        <LocationSearch />
        <ExportButton data={currentWeather} filename="weather-report" />
      </div>
      
      <div className="dashboard-content">
        {currentWeather && (
          <>
            <WeatherCard weather={currentWeather} />
            <button onClick={() => saveLocation(location)}>
              Save Location
            </button>
          </>
        )}
        
        {forecast && (
          <div className="forecast-section">
            <h2>5-Day Forecast</h2>
            <ForecastChart forecast={forecast} />
          </div>
        )}
      </div>
    </div>
  );
}

export default Dashboard;

// src/components/features/LocationSearch.js
import React, { useState, useContext } from 'react';
import { WeatherContext } from '../../context/WeatherContext';

function LocationSearch() {
  const { setLocation } = useContext(WeatherContext);
  const [searchValue, setSearchValue] = useState('');
  const [validationError, setValidationError] = useState('');

  const validateInput = (value) => {
    if (!value.trim()) {
      return 'Location cannot be empty';
    }
    
    // Basic validation - you might want more sophisticated validation
    if (value.length < 2) {
      return 'Location name is too short';
    }
    
    // Clear any existing errors
    return '';
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const error = validateInput(searchValue);
    if (error) {
      setValidationError(error);
      return;
    }
    
    setLocation(searchValue);
    setValidationError('');
  };

  return (
    <form onSubmit={handleSubmit} className="location-search">
      <div className="input-group">
        <input
          type="text"
          value={searchValue}
          onChange={(e) => setSearchValue(e.target.value)}
          placeholder="Enter city name..."
          className={validationError ? 'input-error' : ''}
        />
        <button type="submit">Search</button>
      </div>
      {validationError && (
        <p className="error-message">{validationError}</p>
      )}
    </form>
  );
}

export default LocationSearch;

// src/components/features/ForecastChart.js
import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

function ForecastChart({ forecast }) {
  // Process forecast data for the chart
  const processData = () => {
    if (!forecast || !forecast.list) return [];
    
    return forecast.list.slice(0, 8).map(item => ({
      time: new Date(item.dt * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      temperature: Math.round(item.main.temp),
      humidity: item.main.humidity,
      description: item.weather[0].description
    }));
  };

  const data = processData();

  return (
    <div className="forecast-chart">
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="time" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey="temperature" stroke="#ff7300" activeDot={{ r: 8 }} />
          <Line type="monotone" dataKey="humidity" stroke="#387908" />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

export default ForecastChart;

// src/components/common/ExportButton.js
import React from 'react';
import { exportToCSV, exportToPDF, exportToJSON } from '../../utils/exportUtils';

function ExportButton({ data, filename }) {
  if (!data) return null;

  const handleExport = (format) => {
    switch (format) {
      case 'csv':
        exportToCSV(data, filename);
        break;
      case 'pdf':
        exportToPDF(data, filename);
        break;
      case 'json':
        exportToJSON(data, filename);
        break;
      default:
        console.error('Unsupported export format');
    }
  };

  return (
    <div className="export-buttons">
      <button onClick={() => handleExport('csv')}>Export CSV</button>
      <button onClick={() => handleExport('pdf')}>Export PDF</button>
      <button onClick={() => handleExport('json')}>Export JSON</button>
    </div>
  );
}

export default ExportButton;

// src/utils/exportUtils.js
export const exportToCSV = (data, filename) => {
  // Convert data to flat structure
  const flattenData = (obj, prefix = '') => {
    let result = {};
    
    for (const key in obj) {
      if (typeof obj[key] === 'object' && obj[key] !== null) {
        const nested = flattenData(obj[key], `${prefix}${key}_`);
        result = { ...result, ...nested };
      } else {
        result[`${prefix}${key}`] = obj[key];
      }
    }
    
    return result;
  };
  
  const flatData = flattenData(data);
  
  // Convert to CSV
  const headers = Object.keys(flatData);
  const csvContent = [
    headers.join(','),
    Object.values(flatData).join(',')
  ].join('\n');
  
  // Create and download the file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const exportToPDF = (data, filename) => {
  // In a real app, you would use a library like jsPDF
  // This is a simplified example
  alert('In a real implementation, this would use jsPDF to generate a PDF');
  console.log('Data to be exported to PDF:', data);
  
  // Implementation would include:
  // 1. Format the data
  // 2. Create PDF layout
  // 3. Add data, charts, and styling
  // 4. Generate and download the PDF
};

export const exportToJSON = (data, filename) => {
  const jsonString = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonString], { type: 'application/json' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}.json`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// src/pages/Settings.js
import React, { useContext, useState } from 'react';
import { WeatherContext } from '../context/WeatherContext';

function Settings() {
  const { units, toggleUnits } = useContext(WeatherContext);
  const [darkMode, setDarkMode] = useState(
    localStorage.getItem('darkMode') === 'true'
  );
  const [notifications, setNotifications] = useState(
    localStorage.getItem('notifications') === 'true'
  );
  
  // Save settings to localStorage
  const handleDarkModeChange = () => {
    const newValue = !darkMode;
    setDarkMode(newValue);
    localStorage.setItem('darkMode', newValue);
    // In a real app, you would apply theme changes here
  };
  
  const handleNotificationsChange = () => {
    const newValue = !notifications;
    setNotifications(newValue);
    localStorage.setItem('notifications', newValue);
  };

  return (
    <div className="settings-page">
      <h1>Settings</h1>
      
      <div className="settings-section">
        <h2>Display Settings</h2>
        
        <div className="setting-item">
          <label>
            Temperature Units:
            <select 
              value={units} 
              onChange={toggleUnits}
            >
              <option value="metric">Celsius (°C)</option>
              <option value="imperial">Fahrenheit (°F)</option>
            </select>
          </label>
        </div>
        
        <div className="setting-item">
          <label>
            <input
              type="checkbox"
              checked={darkMode}
              onChange={handleDarkModeChange}
            />
            Dark Mode
          </label>
        </div>
      </div>
      
      <div className="settings-section">
        <h2>Notification Settings</h2>
        
        <div className="setting-item">
          <label>
            <input
              type="checkbox"
              checked={notifications}
              onChange={handleNotificationsChange}
            />
            Enable Weather Alerts
          </label>
        </div>
      </div>
    </div>
  );
}

export default Settings;

// src/pages/SavedLocations.js
import React, { useContext } from 'react';
import { WeatherContext } from '../context/WeatherContext';
import { Link } from 'react-router-dom';

function SavedLocations() {
  const { savedLocations, setLocation, removeLocation } = useContext(WeatherContext);

  const handleLocationClick = (locationName) => {
    setLocation(locationName);
  };

  return (
    <div className="saved-locations-page">
      <h1>Saved Locations</h1>
      
      {savedLocations.length === 0 ? (
        <p>You haven't saved any locations yet.</p>
      ) : (
        <ul className="locations-list">
          {savedLocations.map((locationName) => (
            <li key={locationName} className="location-item">
              <div className="location-name">
                <Link 
                  to={`/forecast/${locationName}`}
                  onClick={() => handleLocationClick(locationName)}
                >
                  {locationName}
                </Link>
              </div>
              <button 
                onClick={() => removeLocation(locationName)}
                className="remove-button"
              >
                Remove
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default SavedLocations;

// src/components/layout/Header.js
import React, { useContext } from 'react';
import { Link } from 'react-router-dom';
import { WeatherContext } from '../../context/WeatherContext';

function Header() {
  const { currentWeather, location } = useContext(WeatherContext);
  
  const currentDate = new Date().toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return (
    <header className="app-header">
      <div className="header-left">
        <Link to="/" className="logo">
          Weather Dashboard
        </Link>
      </div>
      
      <div className="header-center">
        {currentWeather && (
          <div className="current-location">
            {location} | {currentDate}
          </div>
        )}
      </div>
      
      <div className="header-right">
        <Link to="/settings" className="header-link">
          Settings
        </Link>
      </div>
    </header>
  );
}

export default Header;

// src/components/layout/Sidebar.js
import React from 'react';
import { NavLink } from 'react-router-dom';

function Sidebar() {
  return (
    <aside className="sidebar">
      <nav className="sidebar-nav">
        <ul>
          <li>
            <NavLink to="/" end>
              Dashboard
            </NavLink>
          </li>
          <li>
            <NavLink to="/saved-locations">
              Saved Locations
            </NavLink>
          </li>
          <li>
            <NavLink to="/settings">
              Settings
            </NavLink>
          </li>
        </ul>
      </nav>
      
      <div className="sidebar-footer">
        <p>Weather Data</p>
        <small>Powered by OpenWeatherMap</small>
      </div>
    </aside>
  );
}

export default Sidebar;
